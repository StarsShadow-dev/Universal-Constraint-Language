// cd ~lib.std.math
// Vec2 = struct(x: Numner, y: Number)
// Vec2.new = ...

// Vec2.new = @x(getNumber 1) @y(Number)
// 	&Vec2{
// 		x = x
// 		y = y
// 	}

// Vec2.add = @v1(Vec2) @v2(Vec2)
// 	&Vec2{
// 		x = v1.x + v2.x
// 		y = v1.y + v2.y
// 	}

// // ----------

// cd ~myCode
// add = ~lib.std.math.Vec2.add

// test = @v1(Vec2) @v2(Vec2) @v3(Vec2)
// 	add (add v1 v2) v3

// -----

// fib = @n(Number)
// 	if n <= 1 then
// 		n
// 	else
// 		(fib n - 1) + (fib n - 2)

// fib 1

// log = @string(String)
// 	rawEval "console.log(%%1%%)" [string]

// test = log "testing js codegen"

// a = 1
// a:b = 2
// a:b:c = 3
// >cd ~a
// a
// b
// b:c

// Number = __builtin:Number

// Vec2 = struct
// 	x = Number
// 	y = Number
// 	z = 3 // error!

// Option = enum
// 	Some = Vec2
// 	None

// ----------------------

// Number = __builtin:Number

// add = @left(Number) @right(Number) left + right
// add left: 1 right: 2

// add = @args(struct
// 	left = Number
// 	right = Number
// ) args.left + args.right
// add {
// 	left = 1
// 	right = 2
// }

// ----------------------

// Shape = enum
// 	Circle = struct
// 		radius = Int32
// 	Square = struct
// 		sideLength = Int32
// 	Rectangle = struct
// 		width = Int32
// 		height = Int32

// area = @shape(Shape)
// 	match s
// 		Circle(radius) -> 3 * (radius * radius)
// 		Square(sideLength) -> sideLength * sideLength
// 		Rectangle(width, height) -> width * height

// I = @x(Vec2) x

// I &Vec2 {
// 	x = 1
// 	y = 2
// }

// new = @x(Number) @y(Number)
// 	&Vec2 {
// 		x = x
// 		y = y
// 	}

// new 1 2

// List = __builtin:List
// String = __builtin:String
// Number = __builtin:Number

// I = @x(List String) x
// I [1]
// Number

// ----------------------

Number = __builtin:Number
Vec2 = struct(x(Number), y(Number))
Vec2

// ----------------------

// getType = @T(__builtin:Type) T
// test = @x(getType __builtin:String) x

// (getType __builtin:String)
// test "Hello, World"