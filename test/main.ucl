// Vec2 = struct(x: Number, y: Number)
// Vec2.new = fn() -> Vec2 {
	
// }

// Test = struct() // struct(next: Test)

// Number = @Number(0, 10)

// main = fn() -> Number {
// 	11
// }

// main()

// @Number(0, 10)

// ----------

// RetType = effect Type

// main = fn() -> RetType {
// 	1
// }

// with RetType as Number {
// 	main()
// }

// ----------

// Number = effect Type

// add = fn(x1: Number, y2: Number, x1: Number, y2: Number) -> (Number, Number) {
// 	(x1 + x2, y1 + y2)
// }

// with Number as @Number(0, 10, overflow) {
// 	add(10, 10, 1, 1)
// }

// with Number as @Number(0, 10, clamp) {
// 	add(10, 10, 1, 1)
// }

// ----------

// map = fn<In, Out>(input: [In], callBack: (In) -> Out) -> [Out] {
// 	...
// }
// map<Number, String>([1, 2, 3], fn(input: Number) -> String {
// 	Number.toString(input)
// })



// map = fn(In: Type, Out: Type) -> Function {
// 	fn(input: [In], callBack: (In) -> Out) -> [Out] {
// 		...
// 	}
// }
// map(Number, String)([1, 2, 3], fn(input: Number) -> String {
// 	Number.toString(input)
// })



// genericFn = fn(names: [String] function: Function) -> Function {
// 	...
// }
// map = genericFn <| ["In", "Out"] <| fn(input: [In], callBack: (In) -> Out) -> [Out] {
// 	...
// }
// map(Number, String)([1, 2, 3], fn(input: Number) -> String {
// 	Number.toString(input)
// })

// ----------

// genericFn = fn(F: Function) -> Function {
// 	F
// }

// if (false) {
// 	1
// } else {
// 	"2"
// }

// map(Number, String)([1, 2, 3], @in Number.toString(in))

// fib = @n
// 	if n < 2 then
// 		n
// 	else
// 		fib(n - 1) + fib(n - 2)


// genericFn = @names: [String] @function: Function (...) // -> Function
// map = genericFn ["In", "Out"] (@input: [In] @callBack: \(In) -> Out (...)) // -> [Out]
// map (Number, String) [1, 2, 3] (@input Number.toString(input))

// I = @x: Number 
// 	y = x
// 	y

a = @x(String) x
a